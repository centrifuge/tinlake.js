import { ContractNames, Constructor, TinlakeParams } from '../Tinlake';
import BN from 'bn.js';
export declare function AdminActions<ActionsBase extends Constructor<TinlakeParams>>(Base: ActionsBase): {
    new (...args: any[]): {
        isWard: (user: string, contractName: string) => Promise<BN>;
        canSetCeiling: (user: string) => Promise<boolean>;
        canSetInterestRate: (user: string) => Promise<boolean>;
        canSetSeniorTrancheInterest: (user: string) => Promise<boolean>;
        canSetRiskScore: (user: string) => Promise<boolean>;
        canSetEquityRatio: (user: string) => Promise<boolean>;
        canSetInvestorAllowanceJunior: (user: string) => Promise<boolean>;
        canSetInvestorAllowanceSenior: (user: string) => Promise<boolean>;
        canSetThreshold: (user: string) => Promise<boolean>;
        canSetLoanPrice: (user: string) => Promise<boolean>;
        setCeiling: (loanId: string, amount: string) => Promise<unknown>;
        existsRateGroup: (ratePerSecond: string) => Promise<boolean>;
        initRate: (ratePerSecond: string) => Promise<unknown>;
        changeRate: (loan: string, ratePerSecond: string) => Promise<unknown>;
        setRate: (loan: string, ratePerSecond: string) => Promise<unknown>;
        setEquityRatio: (amount: string) => Promise<unknown>;
        approveAllowanceJunior: (user: string, maxCurrency: string, maxToken: string) => Promise<unknown>;
        approveAllowanceSenior: (user: string, maxCurrency: string, maxToken: string) => Promise<unknown>;
        provider: any;
        eth: import("../services/ethereum").ethI;
        ethOptions: any;
        ethConfig: {} | import("../Tinlake").EthConfig;
        contractAddresses: import("../Tinlake").ContractAddresses;
        transactionTimeout: number;
        contracts: import("../Tinlake").Contracts;
        contractAbis: import("../Tinlake").ContractAbis;
        setProvider: (provider: any, ethOptions?: any) => void;
        setEthConfig: (ethConfig: {} | import("../Tinlake").EthConfig) => void;
    };
} & ActionsBase;
export declare type IAdminActions = {
    isWard(user: string, contractName: ContractNames): Promise<BN>;
    canSetCeiling(user: string): Promise<boolean>;
    canSetInterestRate(user: string): Promise<boolean>;
    canSetSeniorTrancheInterest(user: string): Promise<boolean>;
    canSetEquityRatio(user: string): Promise<boolean>;
    canSetRiskScore(user: string): Promise<boolean>;
    canSetInvestorAllowanceJunior(user: string): Promise<boolean>;
    canSetInvestorAllowanceSenior(user: string): Promise<boolean>;
    canSetThreshold(user: string): Promise<boolean>;
    canSetLoanPrice(user: string): Promise<boolean>;
    setCeiling(loanId: string, amount: string): Promise<any>;
    initRate(rate: string): Promise<any>;
    setRate(loan: string, rate: string): Promise<any>;
    setEquityRatio(amount: string): Promise<any>;
    approveAllowanceJunior(user: string, maxCurrency: string, maxToken: string): Promise<any>;
    approveAllowanceSenior(user: string, maxCurrency: string, maxToken: string): Promise<any>;
};
export default AdminActions;
